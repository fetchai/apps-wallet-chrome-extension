"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Identity = void 0;

var secp256k1 = _interopRequireWildcard(require("secp256k1"));

var _errors = require("../errors");

var _btoa = _interopRequireDefault(require("btoa"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * An identity is the public half of a private / public key pair.
 *
 * @public
 * @class
 */
class Identity {
  /**
   * @param  {Object|Buffer} pub_key Identity object or Buffer
   * @throws {ValidationError} ValidationError if invalid public key or unable to load public key from input
   */
  constructor(pub_key) {
    if (pub_key instanceof Identity) {
      this.pub_key = pub_key.public_key();
    } else if (pub_key instanceof Buffer) {
      this.pub_key = pub_key;

      if (!secp256k1.publicKeyVerify(this.prefixed_public_key())) {
        throw new _errors.ValidationError('invalid public key');
      }
    } else {
      throw new _errors.ValidationError('Failed');
    }
  }
  /**
   * Get public key with 04 prefix.
   */


  prefixed_public_key() {
    return Buffer.concat([Buffer.from('04', 'hex'), this.pub_key]);
  }
  /**
   * Get base64 encoded public key.
   */


  public_key_base64() {
    return (0, _btoa.default)(this.pub_key);
  }
  /**
   * Get the public key in bytes(Buffer).
   */


  public_key() {
    return this.pub_key;
  }
  /**
   * Get the public key hex.
   */


  public_key_hex() {
    return this.pub_key.toString('hex');
  }
  /**
   * Get the public key in bytes(Buffer).
   */


  public_key_bytes() {
    return this.pub_key;
  }
  /**
   * Verify the signature.
   * @param  {String} message Message which wants to verify
   * @param  {String} signature Signature
   * @returns signature is valid or not
   */


  verify(message, signature) {
    return secp256k1.verify(message, signature, this.prefixed_public_key());
  }

  static from_base64(private_key_base64) {
    const private_key_bytes = Buffer.from(private_key_base64, 'base64');
    return new Identity(private_key_bytes);
  }

  static from_hex(private_key_hex) {
    const private_key_bytes = Buffer.from(private_key_hex, 'hex');
    return new Identity(private_key_bytes);
  }

}

exports.Identity = Identity;