"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decode_bytearray = exports.encode_bytearray = void 0;

var integer = _interopRequireWildcard(require("./integer"));

var _bn = require("bn.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const encode_bytearray = (buffer, value) => {
  // value in bytes (ascii encoded)
  buffer = integer.encode_integer(buffer, new _bn.BN(value.length));
  return Buffer.concat([buffer, value]);
};

exports.encode_bytearray = encode_bytearray;

const decode_bytearray = buffer => {
  let len; // value in bytes (ascii encoded);

  [len, buffer] = integer.decode_integer(buffer);
  const value = buffer.slice(0, len.toNumber());
  buffer = buffer.slice(len); // then return the length of bytes specified in the header

  return [value, buffer];
};

exports.decode_bytearray = decode_bytearray;