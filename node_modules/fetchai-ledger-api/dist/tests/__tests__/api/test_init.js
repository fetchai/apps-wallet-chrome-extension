"use strict";

var _axios = _interopRequireDefault(require("axios"));

var _crypto = require("../../../fetchai/ledger/crypto");

var _errors = require("../../../fetchai/ledger/errors");

var _api = require("../../../fetchai/ledger/api");

var _helpers = require("../../utils/helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe(':LedgerApi', () => {
  afterEach(() => {
    _axios.default.mockClear();
  });
  test('test server version', async () => {
    expect(async () => {
      await _api.LedgerApi.from_network_name(_helpers.LOCAL_HOST, _helpers.DEFAULT_PORT);
    }).not.toThrow(_errors.IncompatibleLedgerVersionError);
  });
  test('test balance', async () => {
    const api = new _api.TokenApi(_helpers.LOCAL_HOST, _helpers.DEFAULT_PORT);
    const promise = api.balance('2JYHJirXFQd2ZertwThfLX87cbc2XyxXNzjJWwysNP2NXPmkN5');
    expect(_axios.default).toHaveBeenCalledTimes(1);
    await expect(promise).resolves.toEqual(275);
  });
  test('test wealth', async () => {
    const api = new _api.TokenApi(_helpers.LOCAL_HOST, _helpers.DEFAULT_PORT);
    const entity = new _crypto.Entity(Buffer.from('2ff324b9d3367b160069ec67260959b4955ab519426603b5e59d5990128163f3', 'hex'));
    const promise = api.wealth(entity, 500);
    await expect(promise).resolves.toHaveProperty('txs');
    expect(_axios.default).toHaveBeenCalledTimes(2);
  });
  test('test transfer', async () => {
    const api = new _api.LedgerApi(_helpers.LOCAL_HOST, _helpers.DEFAULT_PORT);
    const promise = api.tokens.balance('2JYHJirXFQd2ZertwThfLX87cbc2XyxXNzjJWwysNP2NXPmkN5');
    expect(_axios.default).toHaveBeenCalledTimes(1);
    await expect(promise).resolves.toEqual(275);
    const entity = new _crypto.Entity(Buffer.from('2ff324b9d3367b160069ec67260959b4955ab519426603b5e59d5990128163f3', 'hex'));
    const promise_wealth = api.tokens.wealth(entity, 500);
    expect(_axios.default).toHaveBeenCalledTimes(2);
    await expect(promise_wealth).resolves.toHaveProperty('txs');
    expect(_axios.default).toHaveBeenCalledTimes(3);
    const promise_sync = await api.sync(JSON.parse('[{"txs":["bbc6e88d647ab41923216cdaaba8cdd01f42e953c6583e59179d9b32f52f5777"],"counts":{"received":1,"submitted":1}}]'));
    await expect(promise_sync).toBe(true);
    expect(_axios.default).toHaveBeenCalledTimes(4);
    const promise3 = api.tokens.balance('2JYHJirXFQd2ZertwThfLX87cbc2XyxXNzjJWwysNP2NXPmkN5');
    expect(_axios.default).toHaveBeenCalledTimes(5);
    await expect(promise3).resolves.toEqual(500);
  });
});