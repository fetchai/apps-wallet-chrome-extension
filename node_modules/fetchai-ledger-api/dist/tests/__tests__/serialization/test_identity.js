"use strict";

var identity = _interopRequireWildcard(require("../../../fetchai/ledger/serialization/identity"));

var _entity = require("../../../fetchai/ledger/crypto/entity");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const UNCOMPRESSED_SCEP256K1_PUBLIC_KEY = 0x04;
describe(':Identity', () => {
  test('test encode', () => {
    const entity = new _entity.Entity();
    const buffer = Buffer.from('');
    const ref = Buffer.concat([buffer, Buffer.from([UNCOMPRESSED_SCEP256K1_PUBLIC_KEY]), entity.public_key_bytes()]);
    const bytes = entity.public_key_bytes();
    const encoded = identity.encode_identity(buffer, bytes);
    const buffer2 = Buffer.from(''); // think I can use same buffer as above refactor out when passing tests.

    const encoded_2 = identity.encode_identity(buffer2, bytes); // testing the passed in buffer

    expect(Buffer.byteLength(ref)).toBe(Buffer.byteLength(encoded));
    expect(ref.toString('hex')).toBe(encoded.toString('hex')); // testing the passed in entity.

    expect(Buffer.byteLength(ref)).toBe(Buffer.byteLength(encoded_2));
    expect(ref.toString('hex')).toBe(encoded_2.toString('hex'));
  });
  test('test decode', () => {
    const entity = new _entity.Entity();
    const buf = Buffer.from('');
    const ref = Buffer.concat([buf, Buffer.from([UNCOMPRESSED_SCEP256K1_PUBLIC_KEY]), entity.public_key_bytes()]);
    const [decoded, buffer] = identity.decode_identity(ref);
    const bytes = entity.public_key_bytes();
    expect(decoded.toString('hex')).toBe(bytes.toString('hex'));
    expect(Buffer.byteLength(buffer)).toBe(0);
  });
});