"use strict";

var address = _interopRequireWildcard(require("../../../fetchai/ledger/serialization/address"));

var _address2 = require("../../../fetchai/ledger/crypto/address");

var _helpers = require("../../utils/helpers");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe(':Address', () => {
  test('test encode', () => {
    const ref_address = (0, _helpers.dummy_address)();
    const buf = Buffer.from('');
    const encoded = address.encode_address(buf, ref_address);
    const expected = ref_address.toBytes();
    expect(Buffer.byteLength(expected)).toBe(Buffer.byteLength(encoded));
    expect(expected.toString('hex')).toBe(encoded.toString('hex'));
  });
  test('test decode', () => {
    const ref_address = (0, _helpers.dummy_address)();
    const [address_obj, buffer] = address.decode_address(ref_address.toBytes());
    const expected = ref_address.toBytes();
    const address_bytes = address_obj.toBytes();
    expect(address_obj).toBeInstanceOf(_address2.Address);
    expect(address_bytes.toString('hex')).toBe(expected.toString('hex'));
    expect(Buffer.byteLength(buffer)).toBe(0);
  });
});