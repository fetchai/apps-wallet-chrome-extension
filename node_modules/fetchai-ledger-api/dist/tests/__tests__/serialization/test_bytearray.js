"use strict";

var bytearray = _interopRequireWildcard(require("../../../fetchai/ledger/serialization/bytearray"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe(':Bytearray', () => {
  test('test encode', () => {
    const data = Buffer.from('3E8', 'hex');
    const buf = Buffer.from('');
    const encoded = bytearray.encode_bytearray(buf, data);
    expect(encoded.toString('hex')).toBe('013e');
  });
  test('test decode', () => {
    const data = Buffer.from('0A00010203040506070809', 'hex');
    const [decoded, buffer] = bytearray.decode_bytearray(data);
    expect(decoded.toString('hex')).toBe('00010203040506070809');
    expect(Buffer.byteLength(buffer)).toBe(0);
  });
});