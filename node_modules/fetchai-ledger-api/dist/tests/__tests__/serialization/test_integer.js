"use strict";

var integer = _interopRequireWildcard(require("../../../fetchai/ledger/serialization/integer"));

var _bn = require("bn.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe(':Integer', () => {
  // encode tests
  test('test small unsigned encode', () => {
    const buffer = Buffer.from('');
    const encoded = integer.encode_integer(buffer, new _bn.BN(4));
    expect(encoded.toString('hex')).toBe('04');
  });
  test('test small signed encode', () => {
    const buffer = Buffer.from('');
    const encoded = integer.encode_integer(buffer, new _bn.BN(-4));
    expect(encoded.toString('hex')).toBe('e4');
  });
  test('test 1byte unsigned encode', () => {
    const buffer = Buffer.from('');
    const encoded = integer.encode_integer(buffer, new _bn.BN(0x80));
    expect(encoded.toString('hex')).toBe('c080');
  });
  test('test 2byte unsigned encode', () => {
    const buffer = Buffer.from('');
    const encoded = integer.encode_integer(buffer, new _bn.BN(0xEDEF));
    expect(encoded.toString('hex')).toBe('c1edef');
  });
  test('test 4byte unsigned encode', () => {
    const buffer = Buffer.from('');
    const encoded = integer.encode_integer(buffer, new _bn.BN(0xEDEFABCD));
    expect(encoded.toString('hex')).toBe('c2edefabcd');
  });
  test('test 8byte unsigned encode', () => {
    const buffer = Buffer.from('');
    const eight_byte = new _bn.BN('EDEFABCD01234567', 16);
    const encoded = integer.encode_integer(buffer, eight_byte);
    const expected_buffer = Buffer.from('c3edefabcd01234567', 'hex');
    expect(encoded).toMatchObject(expected_buffer);
  });
  test('test 1byte signed encode', () => {
    const buffer = Buffer.from('');
    const encoded = integer.encode_integer(buffer, new _bn.BN(-0x80));
    expect(encoded.toString('hex')).toBe('d080');
  });
  test('test 2byte signed encode', () => {
    const buffer = Buffer.from('');
    const encoded = integer.encode_integer(buffer, new _bn.BN(-0xEDEF));
    expect(encoded.toString('hex')).toBe('d1edef');
  });
  test('test 4byte signed encode', () => {
    const buffer = Buffer.from('');
    const encoded = integer.encode_integer(buffer, new _bn.BN(-0xEDEFABCD));
    expect(encoded.toString('hex')).toBe('d2edefabcd');
  });
  test('test 8byte signed encode', () => {
    const buffer = Buffer.from('');
    const eight_byte = new _bn.BN('-EDEFABCD01234567', 16);
    const encoded = integer.encode_integer(buffer, eight_byte);
    const expected_buffer = Buffer.from('D3EDEFABCD01234567', 'hex');
    expect(encoded).toMatchObject(expected_buffer);
  }); // start decode tests

  test('test small unsigned decode', () => {
    const buff = Buffer.from('04', 'hex');
    const [decoded, buffer] = integer.decode_integer(buff);
    const reference = new _bn.BN(4);
    const comparison = decoded.cmp(reference);
    expect(comparison).toBe(0);
    expect(Buffer.byteLength(buffer)).toBe(0);
  });
  test('test small signed decode', () => {
    const buff = Buffer.from('E4', 'hex');
    const [decoded, buffer] = integer.decode_integer(buff);
    const reference = new _bn.BN(-4);
    const comparison = decoded.cmp(reference);
    expect(comparison).toBe(0);
    expect(Buffer.byteLength(buffer)).toBe(0);
  });
  test('test 1byte unsigned decode', () => {
    const buff = Buffer.from('C080', 'hex');
    const [decoded, buffer] = integer.decode_integer(buff);
    const reference = new _bn.BN('80', 16);
    const comparison = decoded.cmp(reference);
    expect(comparison).toBe(0);
    expect(Buffer.byteLength(buffer)).toBe(0);
  });
  test('test 2byte unsigned decode', () => {
    const buff = Buffer.from('C1EDEF', 'hex');
    const [decoded, buffer] = integer.decode_integer(buff);
    const reference = new _bn.BN('EDEF', 16);
    const comparison = decoded.cmp(reference);
    expect(comparison).toBe(0);
    expect(Buffer.byteLength(buffer)).toBe(0);
  });
  test('test 4byte unsigned decode', () => {
    const buff = Buffer.from('C2EDEFABCD', 'hex');
    const [decoded, buffer] = integer.decode_integer(buff);
    const reference = new _bn.BN('EDEFABCD', 16);
    const comparison = decoded.cmp(reference);
    expect(comparison).toBe(0);
    expect(Buffer.byteLength(buffer)).toBe(0);
  });
  test('test 8byte unsigned decode', () => {
    const buff = Buffer.from('C3EDEFABCD01234567', 'hex');
    const [decoded, buffer] = integer.decode_integer(buff);
    const reference = new _bn.BN('EDEFABCD01234567', 16);
    expect(reference.toArrayLike(Buffer, 'be')).toMatchObject(decoded.toArrayLike(Buffer, 'be'));
    expect(Buffer.byteLength(buffer)).toBe(0);
  });
  test('test 1byte signed decode', () => {
    const [decoded, buffer] = integer.decode_integer(Buffer.from('D080', 'hex'));
    const reference = new _bn.BN('-80', 16);
    const comparison = decoded.cmp(reference);
    expect(comparison).toBe(0);
    expect(Buffer.byteLength(buffer)).toBe(0);
  });
  test('test 2byte signed decode', () => {
    const [decoded, buffer] = integer.decode_integer(Buffer.from('D1EDEF', 'hex'));
    const reference = new _bn.BN('-EDEF', 16);
    const comparison = decoded.cmp(reference);
    expect(comparison).toBe(0);
    expect(Buffer.byteLength(buffer)).toBe(0);
  });
  test('test 4byte signed decode', () => {
    const [decoded, buffer] = integer.decode_integer(Buffer.from('D1EDEF', 'hex'));
    const reference = new _bn.BN('-EDEF', 16);
    const comparison = decoded.cmp(reference);
    expect(comparison).toBe(0);
    expect(Buffer.byteLength(buffer)).toBe(0);
  });
  test('test 8byte signed decode', () => {
    const buff = Buffer.from('D3EDEFABCD01234567', 'hex');
    const [decoded, buffer] = integer.decode_integer(buff);
    const reference = new _bn.BN('-EDEFABCD01234567', 16);
    const comparison = decoded.cmp(reference);
    expect(comparison).toBe(0);
    expect(Buffer.byteLength(buffer)).toBe(0);
  });
});