"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _GROUP, _PropTypes$shape;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// In firefox, setTimeout with duration 0 too short for browser notice the changes in dom
var initialTransitDuration = 20;
var PHASE = {
  CLOSE: 'close',
  CLOSING: 'closing',
  CLOSED: 'closed',
  OPEN: 'open',
  OPENING: 'opening',
  OPENED: 'opened'
};
var GROUP = (_GROUP = {}, _defineProperty(_GROUP, PHASE.CLOSE, PHASE.CLOSE), _defineProperty(_GROUP, PHASE.CLOSED, PHASE.CLOSE), _defineProperty(_GROUP, PHASE.OPENING, PHASE.CLOSE), _defineProperty(_GROUP, PHASE.CLOSING, PHASE.OPEN), _defineProperty(_GROUP, PHASE.OPEN, PHASE.OPEN), _defineProperty(_GROUP, PHASE.OPENED, PHASE.OPEN), _GROUP);

var Expand =
/*#__PURE__*/
function (_Component) {
  _inherits(Expand, _Component);

  function Expand(props) {
    var _this;

    _classCallCheck(this, Expand);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Expand).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "getClientHeight", function () {
      return _this.refWrapper.scrollHeight;
    });

    _defineProperty(_assertThisInitialized(_this), "getDefaultExpandStyle", function () {
      var status = _this.state.status;

      switch (status) {
        case PHASE.OPENING:
        case PHASE.CLOSE:
        case PHASE.CLOSED:
          return {
            height: 0,
            opacity: 0,
            overflow: 'hidden'
          };

        case PHASE.OPENED:
        case PHASE.CLOSING:
          return {
            height: _this.getClientHeight(),
            opacity: 1,
            overflow: 'hidden'
          };

        default:
          return {
            height: 'auto',
            opacity: 1,
            overflow: 'unset'
          };
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getExpandStyle", function () {
      return _objectSpread({}, _this.getDefaultExpandStyle(), {}, _this.props.styles[GROUP[_this.state.status]]);
    });

    _defineProperty(_assertThisInitialized(_this), "getTransition", function (attribute) {
      return "".concat(attribute, " ").concat(_this.props.duration, "ms ").concat(_this.props.easing);
    });

    _defineProperty(_assertThisInitialized(_this), "updateStatus", function (status) {
      return _this.setState({
        status: status
      });
    });

    _defineProperty(_assertThisInitialized(_this), "delay", function (fn, time) {
      _this.timeout = setTimeout(fn, time);
    });

    _defineProperty(_assertThisInitialized(_this), "clearDelay", function () {
      if (_this.timeout) {
        clearTimeout(_this.timeout);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "transit", function (entering, entered, enter) {
      var duration = _this.props.duration;

      _this.updateStatus(entering);

      _this.delay(function () {
        _this.updateStatus(entered);

        _this.delay(function () {
          _this.updateStatus(enter);
        }, duration);
      }, initialTransitDuration);
    });

    _defineProperty(_assertThisInitialized(_this), "toggle", function (open) {
      _this.clearDelay();

      if (open) {
        _this.transit(PHASE.OPENING, PHASE.OPENED, PHASE.OPEN);
      } else {
        _this.transit(PHASE.CLOSING, PHASE.CLOSED, PHASE.CLOSE);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "setRef", function (ref) {
      _this.refWrapper = ref;
    });

    _this.state = {
      status: _this.props.open ? PHASE.OPEN : PHASE.CLOSE
    };
    return _this;
  }

  _createClass(Expand, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps
    /* prevState */
    ) {
      if (prevProps.open !== this.props.open) {
        this.toggle(this.props.open);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearDelay();
    }
  }, {
    key: "getStyle",
    value: function getStyle() {
      var transition = this.props.transitions.map(this.getTransition).join(',');
      return _objectSpread({}, this.getExpandStyle(), {
        transition: transition
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          children = _this$props.children,
          Tag = _this$props.tag;
      var childProps = {
        className: className,
        style: this.getStyle(),
        ref: this.setRef
      };
      return _react["default"].createElement(Tag, childProps, children);
    }
  }]);

  return Expand;
}(_react.Component);

Expand.propTypes = {
  children: _propTypes["default"].node.isRequired,
  open: _propTypes["default"].bool,
  duration: _propTypes["default"].number,
  easing: _propTypes["default"].string,
  className: _propTypes["default"].string,
  tag: _propTypes["default"].string,
  transitions: _propTypes["default"].arrayOf(_propTypes["default"].string),
  styles: _propTypes["default"].shape((_PropTypes$shape = {}, _defineProperty(_PropTypes$shape, PHASE.OPEN, _propTypes["default"].object), _defineProperty(_PropTypes$shape, PHASE.CLOSE, _propTypes["default"].object), _PropTypes$shape))
};
Expand.defaultProps = {
  open: false,
  duration: 400,
  easing: 'ease-in-out',
  className: '',
  tag: 'div',
  transitions: ['height', 'opacity'],
  styles: {}
};
var _default = Expand;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,